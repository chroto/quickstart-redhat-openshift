Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: DNS Configuration
        Parameters:
          - DomainName
          - SubDomainPrefix
          - HostedZoneID
          - Route53HostedSubdomainZone
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
      - Label:
          default: OpenShift Configuration
        Parameters:
          - OpenshiftContainerPlatformVersion
          - RegistryBucket
          - IgnitionBucketName

    ParameterLabels:
      OpenshiftContainerPlatformVersion:
        default: Openshift Container Platform Version
      RegistryBucket:
        default: Registry Bucket
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      HostedZoneID:
        default: Route 53 Hosted Zone ID
      SubDomainPrefix:
        default: Subdomain Prefix
      Route53HostedSubdomainZone:
        default: Route 53 Subdomain Zone
      ClusterName:
        default: Cluster Name

Parameters:
  SSHKey:
    Description: The public key to be added to the CoreOS boxes for ssh access.
    Default: ""
    Type: String
  OpenShiftMirrorURL:
    Type: String
  OpenShiftClientBinary:
    Type: String
  OpenShiftVersion:
    Type: String
  OpenShiftInstallBinary:
    Type: String
  IgnitionBucketName:
    Description: Bucket Name where the IgnitionCondfig files should be placed
    Type: String
  OpenshiftContainerPlatformVersion:
    Description: OpenShift version to deploy
    Default: '4.3'
    Type: String
    AllowedValues: [ '3.11', '4.3' ]
  Route53HostedSubdomainZone:
    Type: String
  DomainName:
    Description: >-
      OPTIONAL: domain name configured for the cluster, if left blank self signed
      certificates will be used for TLS and the LoadBalancer's auto-generated hostname
      will be used for connections from outside the cluster.
    Type: String
    Default: ""

  ClusterName:
    Default: ""
    Description: Custom cluster name for kubernetes.io/cluster/ tags, if left blank will use the stackname suffixed with the region
    Type: String

  SubDomainPrefix:
    Default: ''
    Description: 'OPTIONAL: Subdomain to use, if left blank DomainName will be used
      without a prefix. If you specify this you must also specify DomainName and HostedZoneID'
    Type: String

  HostedZoneID:
    Description: 'OPTIONAL: Route 53 Hosted Zone ID to use. If left blank route 53
      will not be configured and DNS must be setup manually If you specify this you must also specify DomainName'
    Type: String
    MaxLength: '32'
    Default: ""

  RegistryBucket:
    Description: 'The Name of the S3 Bucket for Image Container Registry'
    Type: String

  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String

  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-redhat-openshift/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String

  PullSecret:
    Description: '(Required OS4 Only) The OCP Pull Secret JSON'
    Type: String

  LogLevel:
    Description: 'Log Level to use for the OpenShift4 Installer'
    Default: DEBUG
    AllowedValues:
      - DEBUG
      - INFO
      - ERROR
      - WARNING
    Type: String

Resources:

  LambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []

  OpenShift4InstallationLambda:
    DependsOn: CopyZips
    Condition: OS4
    Type: AWS::Lambda::Function
    Properties:
      Description: A Lambda to install, configure, and manage OS4 clusters
      Handler: lambda_handler.handler
      MemorySize: 512
      Role: !GetAtt OpenShift4InstallationRole.Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          LogLevel: !Ref LogLevel
          AuthBucket: !Ref IgnitionBucketName
          ClusterName: !Ref ClusterName
          HostedZoneName: !Join
            - ''
            - - !If
                - SetupSubdomain
                - !Sub '${SubDomainPrefix}.'
                - ''
              - !Ref 'DomainName'
          OpenShiftMirrorURL: !Ref OpenShiftMirrorURL
          OpenShiftVersion: !Ref OpenShiftVersion
          OpenShiftClientBinary: !Ref OpenShiftClientBinary
          OpenShiftInstallBinary: !Ref OpenShiftInstallBinary
          PullSecret: !Ref PullSecret
          QSS3BucketName: !Ref QSS3BucketName
          QSS3KeyPrefix: !Ref QSS3KeyPrefix
          SSHKey: !Ref SSHKey
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/OpenShift4Installation/lambda.zip'


  OpenShift4InstallationRole:
    Condition: OS4
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: stackdirector
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource:
                  - !Sub 'arn:aws:s3:::${IgnitionBucketName}/*'
                  - !Sub 'arn:aws:s3:::${IgnitionBucketName}'
        - PolicyName: DisableValidateCron
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:DisableRule
                Resource:
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${ClusterName}-ValidateEvent"
        - PolicyName: CFValidation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - iam:GetUser
                  - iam:CreateUser
                  - iam:DeleteUser
                  - iam:AttachUserPolicy
                  - iam:DetachUserPolicy
                  - iam:ListAccessKeys
                  - iam:CreateLoginProfile
                  - iam:DeleteLoginProfile
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:GetRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:PutRolePolicy
                  - iam:PassRole
                  - iam:CreateInstanceProfile
                  - iam:DeleteInstanceProfile
                  - iam:AddRoleToInstanceProfile
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:CreateServiceLinkedRole
                  - lambda:CreateFunction
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:DeleteFunction
                  - lambda:InvokeFunction
                  - cloudformation:Create*
                  - cloudformation:ListStacks*
                  - cloudformation:Delete*
                  - cloudformation:Describe*
                  - ec2:DescribeVpcs
                  - ec2:DescribeImages
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeRouteTables
                  - ec2:DescribeVolumes
                  - ec2:DescribeVpcAttribute
                  - ec2:DescribeVpcClassicLink
                  - ec2:DescribeVpcClassicLinkDnsSupport
                  - ec2:DescribeVpcEndpoints
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeTags
                  - ec2:CreateSecurityGroup
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:DeleteSecurityGroup
                  - ec2:RunInstances
                  - ec2:TerminateInstances
                  - ec2:DescribeInstances
                  - ec2:createTags
                  - ec2:DeleteTags
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:DeleteTargetGroup
                  - elasticloadbalancing:CreateTargetGroup
                  - elasticloadbalancing:DeleteLoadBalancer
                  - elasticloadbalancing:CreateLoadBalancer
                  - elasticloadbalancing:DeleteListener
                  - elasticloadbalancing:CreateListener
                  - elasticloadbalancing:ModifyTargetGroupAttributes
                  - route53:ChangeResourceRecordSets
                  - route53:ChangeTagsForResource
                  - route53:ListResourceRecordSets
                  - route53:GetHostedZone
                  - route53:ListHostedZones
                  - route53:CreateHostedZone
                  - route53:DeleteHostedZone
                  - route53:ListQueryLoggingConfigs
                  - route53:GetChange
                Resource: "*"


  ACMCertificateLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Condition: SetupRoute53
    Properties:
      Description: Creates and verifies an ACM certificate using DNS validation and
        route53
      Handler: lambda_function.handler
      Runtime: python2.7
      Role: !GetAtt 'ACMCertificateRole.Arn'
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/ACMCert/lambda.zip'

  ACMCertificateRole:
    Condition: SetupRoute53
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-acm
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - acm:RequestCertificate
                  - acm:DescribeCertificate
                  - acm:DeleteCertificate
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource:
                  - !If
                    - SetupSubdomain
                    - !Sub 'arn:aws:route53:::hostedzone/${Route53HostedSubdomainZone}'
                    - !Sub 'arn:aws:route53:::hostedzone/${HostedZoneID}'
              - Effect: Allow
                Action:
                  - logs:FilterLogEvents
                Resource:
                  - '*'

  KeyGen:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/KeyGen/lambda.zip'
      Handler: service.handler
      Runtime: python3.6
      Timeout: 300
      Role: !GetAtt 'KeyGenRole.Arn'

  KeyGenRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: lambda_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: '*'

  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - functions/packages/OpenShift4Installation/lambda.zip
        - functions/packages/KeyGen/lambda.zip
        - functions/packages/DeleteBucketContents/lambda.zip
        - functions/packages/ACMCert/lambda.zip
        - functions/packages/CleanupPV/lambda.zip
        - functions/packages/UnSubscribe/lambda.zip

  CleanupPVLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Description: When the OpenShift Quickstart is deleted this deletes any orphaned
        EBS volumes used as OpenShift Persistent Volumes
      Handler: lambda_function.handler
      Runtime: python2.7
      Role: !GetAtt 'CleanupPVRole.Arn'
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/CleanupPV/lambda.zip'

  UnSubscribeLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt 'UnSubscribeRole.Arn'
      Runtime: python2.7
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/UnSubscribe/lambda.zip'

  DeleteBucketContentsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: deletebucketcontents
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub 'arn:aws:s3:::${RegistryBucket}'
                  - !Sub 'arn:aws:s3:::${RegistryBucket}/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
  DeleteBucketContentsLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt 'DeleteBucketContentsRole.Arn'
      Runtime: python2.7
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/DeleteBucketContents/lambda.zip'

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'
  UnSubscribeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-unsubscribe
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - logs:FilterLogEvents
                Resource:
                  - '*'
  CleanupPVRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-cleanuppv
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeVolumes
                  - ec2:DeleteVolume
                  - ec2:CreateTags
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - logs:FilterLogEvents
                Resource:
                  - '*'

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          
          
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          
          
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          
          
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          
          
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

Conditions:
  SetupSubdomain: !And
    - !Not
      - !Equals
        - !Ref 'SubDomainPrefix'
        - ''
    - !Not
      - !Equals
        - !Ref 'HostedZoneID'
        - ''
    - !Not
      - !Equals
        - !Ref 'DomainName'
        - ''

  SetupRoute53: !And
    - !Not
      - !Equals
        - !Ref 'HostedZoneID'
        - ''
    - !Not
      - !Equals
        - !Ref 'DomainName'
        - ''
  OS4:
    !Or [ !Equals [!Ref OpenshiftContainerPlatformVersion, '4.2'], !Equals [!Ref OpenshiftContainerPlatformVersion, '4.3']]

Outputs:

  UnSubscribeLambdaArn:
    Description: "The ARN for the UnSubscribe custom resource"
    Value: !GetAtt UnSubscribeLambda.Arn

  CleanupPVLambdaArn:
    Description: "The ARN For the CleanupPV custom resource"
    Value: !GetAtt CleanupPVLambda.Arn


  KeyGenLambdaArn:
    Description: "The ARN For the KeyGen custom resource"
    Value: !GetAtt KeyGen.Arn

  ACMCertificateLambdaArn:
    Condition: SetupRoute53
    Description: "The ARN For the ACMCert custom resource"
    Value: !GetAtt ACMCertificateLambda.Arn

  DeleteBucketContentsLambdaArn:
    Description: "The ARN For the DeleteBucketContents custom resource"
    Value: !GetAtt DeleteBucketContentsLambda.Arn

  OpenShift4InstallationLambdaArn:
    Description: "The ARN For the OpenShift4 Installer custom resource"
    Condition: OS4
    Value: !GetAtt OpenShift4InstallationLambda.Arn

  LambdaZipsBucket:
    Description: "The S3 Bucket to store all custom Lambda functions"
    Value: !Ref LambdaZipsBucket

